<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>FinanceiroWeb</display-name>
	<welcome-file-list>
		<welcome-file>/index.jsf</welcome-file>
	</welcome-file-list>
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>

	<context-param>
		<param-name>primefaces.THEME</param-name>
		<param-value>start</param-value>
	</context-param>

	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>

	<!-- Configuração responsável por configurar onde será salvo o status da 
		aplicação. Neste caso, será salvo no cliente. Sem esta configuração, o jsf 
		salva a configuração no cliente por padrão. -->
	<context-param>
		<description>State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2</description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>

	<!-- Mapeamento das classes para utilização da Expression Language 2.2 -->
	<context-param>
		<param-name>com.sun.faces.expressionFactory</param-name>
		<param-value>com.sun.el.ExpressionFactoryImpl</param-value>
	</context-param>

	<!-- Filtro do Hibernate que impede que várias conexões sejam abertas, a 
		cada solicitação das url's mapeadas, uma conexão com o banco será aberta -->
	<filter>
		<filter-name>conexaoFilter</filter-name>
		<filter-class>financeiro.web.filter.ConexaoHibernateFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>conexaoFilter</filter-name>
		<url-pattern>*.jsf</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>conexaoFilter</filter-name>
		<url-pattern>/webservice/*</url-pattern>
	</filter-mapping>

	<!-- Configuração do DataSource JNDI que possibilita o compartilhamento 
		da conexão com o banco entre o Hibernate e o Spring Security -->
	<resource-ref>
		<description>DataSource FinanceiroDB</description>
		<res-ref-name>jdbc/FinanceiroDB</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<!-- Configuração do DataSource JNDI refetente as informações do servidor 
		de envio de emails -->
	<resource-ref>
		<description>Mail Session</description>
		<res-ref-name>mail/Session</res-ref-name>
		<res-type>javax.mail.Session</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<!-- Configuração do Spring Security para interceptação de todas as requisições 
		visando a verificação da permissão do usuário. Aqui é especificado quais 
		são os arquivos de configuração disponíveis -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		/WEB-INF/applicationContext.xml
		/WEB-INF/applicationContext-security.xml	
	</param-value>
	</context-param>
	<!-- Configuração do filtro do Spring Security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- Configuração do Listener do Spring Security -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Mapeamento do WebService -->
	<!-- Este listener é responsávl por ler o arquivo sun-jaxws.xml que possui 
		a especificação do serviço que será disponibilizado -->
	<listener>
		<listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
	</listener>
	<!-- Este servlet, será responsável por publicar e distribuir o WebService -->
	<servlet>
		<description>WebServices do Financeiro</description>
		<display-name>financeiroWS</display-name>
		<servlet-name>financeiroWS</servlet-name>
		<servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>financeiroWS</servlet-name>
		<url-pattern>/webservice/financeiroWS</url-pattern>
	</servlet-mapping>
</web-app>