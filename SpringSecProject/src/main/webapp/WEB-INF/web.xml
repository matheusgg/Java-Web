<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
	<display-name>SpringSecProject</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- FacesServlet -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>

	<!-- Altera a extensão padrao (xhtml) dos arquivos de paginas do JSF para html. -->
	<!-- <context-param> -->
	<!-- <param-name>javax.faces.DEFAULT_SUFFIX</param-name> -->
	<!-- <param-value>.html</param-value> -->
	<!-- </context-param> -->

	<!-- <context-param> -->
	<!-- <param-name>javax.faces.FACELETS_VIEW_MAPPINGS</param-name> -->
	<!-- <param-value>*.html</param-value> -->
	<!-- </context-param> -->

	<!-- Filtro de configuração do SpringSecurity. Este filtro capturará todos os tipos de requisicoes para qualquer URL. -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>ASYNC</dispatcher>
		<dispatcher>ERROR</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>

	<!-- Listener responsavel por carregar as configuracoes do arquivo applicationContext.xml na inicializacao da aplicacao. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Listener responsavel por realizar o controle de quantidade de sessoes ativas ao mesmo tempo dos usuário. -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<!-- Listener do Spring para interceptar e preparar as requisições, tornando assim atributos de requisicao e de sessao disponíveis nos componentes do Spring -->
	<!-- <listener> -->
	<!-- <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class> -->
	<!-- </listener> -->
</web-app>